// Code generated by Prisma (prisma@1.26.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  lead: (where?: LeadWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  lead: (where: LeadWhereUniqueInput) => LeadPromise;
  leads: (args?: {
    where?: LeadWhereInput;
    orderBy?: LeadOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Lead>;
  leadsConnection: (args?: {
    where?: LeadWhereInput;
    orderBy?: LeadOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LeadConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createLead: (data: LeadCreateInput) => LeadPromise;
  updateLead: (args: {
    data: LeadUpdateInput;
    where: LeadWhereUniqueInput;
  }) => LeadPromise;
  updateManyLeads: (args: {
    data: LeadUpdateManyMutationInput;
    where?: LeadWhereInput;
  }) => BatchPayloadPromise;
  upsertLead: (args: {
    where: LeadWhereUniqueInput;
    create: LeadCreateInput;
    update: LeadUpdateInput;
  }) => LeadPromise;
  deleteLead: (where: LeadWhereUniqueInput) => LeadPromise;
  deleteManyLeads: (where?: LeadWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  lead: (
    where?: LeadSubscriptionWhereInput
  ) => LeadSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type LeadOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "surname_ASC"
  | "surname_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type LeadWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface LeadWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  surname?: String;
  surname_not?: String;
  surname_in?: String[] | String;
  surname_not_in?: String[] | String;
  surname_lt?: String;
  surname_lte?: String;
  surname_gt?: String;
  surname_gte?: String;
  surname_contains?: String;
  surname_not_contains?: String;
  surname_starts_with?: String;
  surname_not_starts_with?: String;
  surname_ends_with?: String;
  surname_not_ends_with?: String;
  AND?: LeadWhereInput[] | LeadWhereInput;
  OR?: LeadWhereInput[] | LeadWhereInput;
  NOT?: LeadWhereInput[] | LeadWhereInput;
}

export interface LeadCreateInput {
  name: String;
  surname?: String;
}

export interface LeadUpdateInput {
  name?: String;
  surname?: String;
}

export interface LeadUpdateManyMutationInput {
  name?: String;
  surname?: String;
}

export interface LeadSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LeadWhereInput;
  AND?: LeadSubscriptionWhereInput[] | LeadSubscriptionWhereInput;
  OR?: LeadSubscriptionWhereInput[] | LeadSubscriptionWhereInput;
  NOT?: LeadSubscriptionWhereInput[] | LeadSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Lead {
  id: ID_Output;
  name: String;
  surname?: String;
}

export interface LeadPromise extends Promise<Lead>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  surname: () => Promise<String>;
}

export interface LeadSubscription
  extends Promise<AsyncIterator<Lead>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  surname: () => Promise<AsyncIterator<String>>;
}

export interface LeadConnection {
  pageInfo: PageInfo;
  edges: LeadEdge[];
}

export interface LeadConnectionPromise
  extends Promise<LeadConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LeadEdge>>() => T;
  aggregate: <T = AggregateLeadPromise>() => T;
}

export interface LeadConnectionSubscription
  extends Promise<AsyncIterator<LeadConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LeadEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLeadSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface LeadEdge {
  node: Lead;
  cursor: String;
}

export interface LeadEdgePromise extends Promise<LeadEdge>, Fragmentable {
  node: <T = LeadPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LeadEdgeSubscription
  extends Promise<AsyncIterator<LeadEdge>>,
    Fragmentable {
  node: <T = LeadSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLead {
  count: Int;
}

export interface AggregateLeadPromise
  extends Promise<AggregateLead>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLeadSubscription
  extends Promise<AsyncIterator<AggregateLead>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface LeadSubscriptionPayload {
  mutation: MutationType;
  node: Lead;
  updatedFields: String[];
  previousValues: LeadPreviousValues;
}

export interface LeadSubscriptionPayloadPromise
  extends Promise<LeadSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LeadPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LeadPreviousValuesPromise>() => T;
}

export interface LeadSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LeadSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LeadSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LeadPreviousValuesSubscription>() => T;
}

export interface LeadPreviousValues {
  id: ID_Output;
  name: String;
  surname?: String;
}

export interface LeadPreviousValuesPromise
  extends Promise<LeadPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  surname: () => Promise<String>;
}

export interface LeadPreviousValuesSubscription
  extends Promise<AsyncIterator<LeadPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  surname: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Lead",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
